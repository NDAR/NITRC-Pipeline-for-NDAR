#!/usr/bin/python

import sys
import os
import argparse
import subprocess
import cx_Oracle

progname = os.path.basename(sys.argv[0])

description = 'Queue NDAR structural processing runs.'
parser = argparse.ArgumentParser(description=description)

parser.add_argument('--host', '-H', help='database host', required=True)
parser.add_argument('--user', '-u', help='database user', required=True)
parser.add_argument('--service', '-s', help='database service', required=True)
parser.add_argument('--password', '-p', help='database password')
parser.add_argument('--check-only', '-c', 
                    action='store_true', 
                    default=False, 
                    help='check database entries only (don\'t queue runs)')
parser.add_argument('--file', '-f', 
                    type=file, 
                    help='file containing S3 files to process')
parser.add_argument('files', 
                    help='S3 files to process', 
                    nargs='*')

args = parser.parse_args()

if not args.files and not args.file:
    parser.print_usage(sys.stderr)
    fmt = '%s: error: S3 files (file or positional arguments) required\n'
    sys.stderr.write(fmt % progname)
    sys.exit(2)

password = args.password
if not password:
    try:
        password = os.environ['DB_PW']
    except KeyError:
        msg = '%s: no database password given (-p or DB_PW)\n' % progname
        sys.stderr.write(msg)
        sys.exit(1)

print 'gathering files...'

files = []
if args.file:
    files.extend([ line.rstrip('\n') for line in args.file ])
if args.files:
    files.extend(args.files)

print 'connecting to database...'
dsn = cx_Oracle.makedsn(args.host, 1521, args.service)
db = cx_Oracle.connect(args.user, password, dsn)

print 'reading image03...'

c = db.cursor()
image_files_by_id = {}
image_ids_by_file = {}
c.execute("SELECT DISTINCT image_file, image03_id FROM image03")
for (image_file, image03_id) in c:
    if image_file not in files:
        continue
    image_files_by_id.setdefault(image03_id, []).append(image_file)
    image_ids_by_file.setdefault(image_file, []).append(image03_id)

print 'checking files...'

missing_files = []
for l in files:
    if l not in image_ids_by_file:
        missing_files.append(l)

if missing_files:
    print 'request files not in the database:'
    for l in missing_files:
        print '    %s' % l
    sys.exit(1)

print 'checking ID/file uniqueness...'

multiple_files = []
multiple_ids = []

for l in files:
    if len(image_ids_by_file[l]) > 1:
        multiple_ids.append(l)
    else:
        id = image_ids_by_file[l][0]
        if len(image_files_by_id[id]) > 1:
            multiple_files.append(id)

if multiple_files:
    print 'ids with multiple files:'
    for id in multiple_files:
        print '    %d: %s' % (id, ', '.join(image_files_by_id[id]))

if multiple_ids:
    print 'files with multiple ids:'
    for file in multiple_ids:
        str_ids = [ str(l) for l in image_ids_by_file[file]]
        print '    %s: %s' % (file, ', '.join(str_ids))

if multiple_files or multiple_ids:
    sys.exit(1)

if args.check_only:
    sys.exit(0)

c.close()

db.close()

for f in args.files:
    subprocess.call(['echo', 'qsub', 'stuff'])

sys.exit(0)

# eof
