#!/usr/bin/python

# See file COPYING distributed with ndar-backend for copyright and license.

# portions of this script are derived from the birn script in the 
# One Click Project (https://github.com/INCF/one_click)

import sys
import os
import argparse
import HTMLParser
import cx_Oracle

def attr_value(attrs, name, default=None):
    for (n, v) in attrs:
        if n == name:
            return v
    return default

class HTMLTable:

    def __init__(self, id):
        self.id = id
        # self.cells[row][col] = data
        self.cells = {}
        self.row = None
        self.col = None
        self.rowspan = None
        self.colspan = None
        self.cell = None
        return

    def __iter__(self):
        max_row = max(self.cells)
        max_col = 0
        for r in xrange(max_row+1):
            mc = max(self.cells[r])
            if max_col < mc:
                max_col = mc
        for row in range(max_row+1):
            cols = []
            for col in range(max_col+1):
                try:
                    cols.append(self.cells[row][col])
                except KeyError:
                    cols.append(None)
            yield cols
        return

    def tr(self):
        if self.row is None:
            self.row = 0
        else:
            self.row += 1
        return

    def td(self, attrs):
        self.rowspan = int(attr_value(attrs, 'rowspan', 1))
        self.colspan = int(attr_value(attrs, 'colspan', 1))
        self.cell = ''
        if self.row not in self.cells:
            self.col = 0
        else:
            if self.col is None:
                self.col = 0
            while True:
                if self.col not in self.cells[self.row]:
                    break
                self.col += 1
        return

    def data(self, data):
        self.cell += data
        return

    def end_td(self):
        for r in range(self.row, self.row+self.rowspan):
            for c in range(self.col, self.col+self.colspan):
                self.cells.setdefault(r, {})
                self.cells[r][c] = self.cell
        self.rowspan = None
        self.colspan = None
        self.cell = None
        return

    def end_tr(self):
        self.col = None
        return

class BIRNParser(HTMLParser.HTMLParser):

    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.state = None
        self.table = None
        self.data = {}
        return

    def handle_starttag(self, tag, attrs):
        # occasionally a </td> is missing, so we get <td>data<td>more data; 
        # handle that case here (simulate the missing </td>)
        if self.state == 'td' and tag == 'td':
            self.handle_endtag('td')
        if not self.state:
            if tag == 'table':
                self.table = HTMLTable(attr_value(attrs, 'id'))
                self.state = 'table'
        elif self.state == 'table':
            if tag == 'tr':
                self.table.tr()
                self.state = 'tr'
        elif self.state == 'tr':
            if tag == 'td':
                self.table.td(attrs)
                self.state = 'td'
        return

    def handle_data(self, data):
        if self.state == 'td':
            self.table.data(data)
        return

    def handle_endtag(self, tag):
        if self.state == 'table':
            if tag == 'table':
                self.read_table()
                self.table = None
                self.state = None
        elif self.state == 'tr':
            if tag == 'tr':
                self.table.end_tr()
                self.state = 'table'
        elif self.state == 'td':
            if tag == 'td':
                self.table.end_td()
                self.state = 'tr'
        return

    def read_table(self):
        if self.table.id == 'table_top_summary':
            for row in self.table:
                if row[0] == 'input':
                    self.take_summary_input_value(row)
                elif row[0] == 'masked':
                    self.take_summary_masked_value(row)
                elif row[0] == 'masked, detrended':
                    self.take_summary_md_value(row)
        elif self.table.id is None:
            pass
        elif self.table.id.startswith('table_') and \
             self.table.id.endswith('_summary'):
            self.read_summary_table(self.table.id[6:-8])
        elif self.table.id.startswith('qa_data_'):
            self.read_data_table(self.table.id[8:])
        return

    def read_summary_table(self, name):
        self.data[name] = {}
        for row in self.table:
            if row[0] == 'Mean:':
                if row[1] == '(absolute)\n':
                    self.data[name]['abs_mean'] = row[2]
                elif row[1] == '(relative)':
                    self.data[name]['rel_mean'] = row[2]
        return

    def read_data_table(self, name):
        data = []
        for row in self.table:
            if row[0] == 'VOLNUM':
                continue
            data.append(row)
        self.data[name]['data'] = data
        return

    def take_summary_input_value(self, row):
        if row[1] == '# potentially-clipped voxels':
            if row[3] == 'N/A':
                self.input_pcv = None
            else:
                self.input_pcv = int(row[3])
        elif row[1] == '# vols. with mean intensity abs. z-score > 3':
            if row[2] == 'individual':
                self.input_nvmiaz3_ind = int(row[3])
            elif row[2] == 'rel. to grand mean':
                self.input_nvmiaz3_rgm = int(row[3])
        elif row[1] == '# vols. with mean intensity abs. z-score > 4':
            if row[2] == 'individual':
                self.input_nvmiaz4_ind = int(row[3])
            elif row[2] == 'rel. to grand mean':
                self.input_nvmiaz4_rgm = int(row[3])
        elif row[1] == '# vols. with mean volume difference > 1%':
            self.input_nvmvd1 = int(row[3])
        elif row[1] == '# vols. with mean volume difference > 2%':
            self.input_nvmvd2 = int(row[3])
        return

    def take_summary_masked_value(self, row):
        if row[1] == 'mean FWHM':
            if row[2] == 'X':
                self.masked_fwhm_x = float(row[3])
            elif row[2] == 'Y':
                self.masked_fwhm_y = float(row[3])
            elif row[2] == 'Z':
                self.masked_fwhm_z = float(row[3])
        return

    def take_summary_md_value(self, row):
        if row[1] == '# vols. with mean intensity abs. z-score > 3':
            if row[2] == 'individual':
                self.md_nvmiaz3_ind = int(row[3])
            elif row[2] == 'rel. to grand mean':
                self.md_nvmiaz3_rgm = int(row[3])
        elif row[1] == '# vols. with mean intensity abs. z-score > 4':
            if row[2] == 'individual':
                self.md_nvmiaz4_ind = int(row[3])
            elif row[2] == 'rel. to grand mean':
                self.md_nvmiaz4_rgm = int(row[3])
        elif row[1] == '# vols. with running difference > 1%':
            self.md_nvrd1 = int(row[3])
        elif row[1] == '# vols. with running difference > 2%':
            self.md_nvrd2 = int(row[3])
        elif row[1] == '# vols. with > 1% outlier voxels':
            self.md_nv1ov = int(row[3])
        elif row[1] == '# vols. with > 2% outlier voxels':
            self.md_nv2ov = int(row[3])
        elif row[1] == 'mean (ROI in middle slice)':
            self.md_mroims = float(row[3])
        elif row[1] == 'mean SNR (ROI in middle slice)':
            self.md_msnroims = float(row[3])
        elif row[1] == 'mean SFNR (ROI in middle slice)':
            self.md_msfnrroims = float(row[3])
        return

progname = os.path.basename(sys.argv[0])

description = 'Store time series QA results in an NDAR database.'
parser = argparse.ArgumentParser(description=description)

parser.add_argument('--file-name', 
                    required=True, 
                    help='original file name (from image03)')
parser.add_argument('--subjectkey', 
                    required=True)
parser.add_argument('--interview-age', 
                    required=True, 
                    type=int)
parser.add_argument('--image03-id', 
                    required=True, 
                    type=int)
parser.add_argument('index_html_file', 
                    help='path to index.html from fmriqa_generate.pl')

args = parser.parse_args()

try:
    data = open(args.index_html_file).read()
except IOError, data:
    sys.stderr.write('%s: %s\n' % (progname, str(data)))
    sys.exit(1)

birn_parser = BIRNParser()
birn_parser.feed(data)

for var in ('DB_HOST', 'DB_SERVICE', 'DB_USER', 'DB_PASSWORD'):
    if var not in os.environ:
        sys.stderr.write('%s: %s not set\n' % (progname, var))
        sys.exit(1)

dsn = cx_Oracle.makedsn(os.environ['DB_HOST'], 1521, os.environ['DB_SERVICE'])
db = cx_Oracle.connect(os.environ['DB_USER'], os.environ['DB_PASSWORD'], dsn)

c = db.cursor()

query = """INSERT INTO imaging_qa01 (file_source, 
                                     image03_id, 
                                     subjectkey, 
                                     interview_age, 
                                     input_pot_clipped_voxels, 
                                     input_vols_mi_abs_z_3_ind, 
                                     input_vols_mi_abs_z_3_rgm, 
                                     input_vols_mi_abs_z_4_ind, 
                                     input_vols_mi_abs_z_4_rgm, 
                                     input_vols_mvd_1, 
                                     input_vols_mvd_2, 
                                     masked_mean_fwhm_x, 
                                     masked_mean_fwhm_y, 
                                     masked_mean_fwhm_z, 
                                     masked_detr_vols_run_diff_1, 
                                     masked_detr_vols_run_diff_2, 
                                     masked_detr_vols_1_outliers, 
                                     masked_detr_vols_2_outliers, 
                                     masked_detrended_mean, 
                                     masked_detr_mean_snr, 
                                     masked_detr_mean_sfnr) 
           VALUES (:file_source, 
                   :image03_id, 
                   :subjectkey, 
                   :interview_age, 
                   :input_pot_clipped_voxels, 
                   :input_vols_mi_abs_z_3_ind, 
                   :input_vols_mi_abs_z_3_rgm, 
                   :input_vols_mi_abs_z_4_ind, 
                   :input_vols_mi_abs_z_4_rgm, 
                   :input_vols_mvd_1, 
                   :input_vols_mvd_2, 
                   :masked_mean_fwhm_x, 
                   :masked_mean_fwhm_y, 
                   :masked_mean_fwhm_z, 
                   :masked_detr_vols_run_diff_1, 
                   :masked_detr_vols_run_diff_2, 
                   :masked_detr_vols_1_outliers, 
                   :masked_detr_vols_2_outliers, 
                   :masked_detrended_mean, 
                   :masked_detr_mean_snr, 
                   :masked_detr_mean_sfnr)"""

query_params = {'file_source': args.file_name, 
                'image03_id': args.image03_id, 
                'subjectkey': args.subjectkey, 
                'interview_age': args.interview_age, 
                'input_pot_clipped_voxels': birn_parser.input_pcv, 
                'input_vols_mi_abs_z_3_ind': birn_parser.input_nvmiaz3_ind, 
                'input_vols_mi_abs_z_3_rgm': birn_parser.input_nvmiaz3_rgm, 
                'input_vols_mi_abs_z_4_ind': birn_parser.input_nvmiaz4_ind, 
                'input_vols_mi_abs_z_4_rgm': birn_parser.input_nvmiaz4_rgm, 
                'input_vols_mvd_1': birn_parser.input_nvmvd1, 
                'input_vols_mvd_2': birn_parser.input_nvmvd2, 
                'masked_mean_fwhm_x': birn_parser.masked_fwhm_x, 
                'masked_mean_fwhm_y': birn_parser.masked_fwhm_y, 
                'masked_mean_fwhm_z': birn_parser.masked_fwhm_z, 
                'masked_detr_vols_run_diff_1': birn_parser.md_nvrd1, 
                'masked_detr_vols_run_diff_2': birn_parser.md_nvrd2, 
                'masked_detr_vols_1_outliers': birn_parser.md_nv1ov, 
                'masked_detr_vols_2_outliers': birn_parser.md_nv2ov, 
                'masked_detrended_mean': birn_parser.md_mroims, 
                'masked_detr_mean_snr': birn_parser.md_msnroims, 
                'masked_detr_mean_sfnr': birn_parser.md_msfnrroims}

c.execute(query, query_params)

c.close()

db.commit()

db.close()

print 'done'

# eof
