#!/usr/bin/python

import sys
import os
import argparse
import subprocess
import cx_Oracle

progname = os.path.basename(sys.argv[0])

description = 'Queue NDAR basic checks.'
parser = argparse.ArgumentParser(description=description)

parser.add_argument('--file', '-f', 
                    type=file, 
                    help='file containing S3 files to process')
parser.add_argument('--all', '-a', 
                    action='store_true', 
                    default=False, 
                    help='queue all files')
parser.add_argument('--check-only', '-c', 
                    action='store_true', 
                    default=False, 
                    help='check only, don\'t actually queue')
parser.add_argument('files', 
                    help='S3 files to process', 
                    nargs='*')

args = parser.parse_args()

if args.all:
    if args.files or args.file:
        parser.print_usage(sys.stderr)
        fmt = '%s: error: S3 files (file or positional arguments) given with --all\n'
        sys.stderr.write(fmt % progname)
        sys.exit(2)
else:
    if not args.files and not args.file:
        parser.print_usage(sys.stderr)
        fmt = '%s: error: S3 files (file or positional arguments) or --all required\n'
        sys.stderr.write(fmt % progname)
        sys.exit(2)

print 'connecting to database...'

for var in ('DB_HOST', 'DB_SERVICE', 'DB_USER', 'DB_PASSWORD'):
    if var not in os.environ:
        sys.stderr.write('%s: %s not set\n' % (progname, var))
        sys.exit(1)

dsn = cx_Oracle.makedsn(os.environ['DB_HOST'], 1521, os.environ['DB_SERVICE'])
db = cx_Oracle.connect(os.environ['DB_USER'], os.environ['DB_PASSWORD'], dsn)

c = db.cursor()

print 'getting image03 files...'

query = "SELECT image_file, subjectkey, interview_age, image03_id FROM image03"
c.execute(query)
image03 = {}
for row in c:
    image03.setdefault(row[0], []).append(row)
image03_files = set(image03)
print '    %d' % len(image03_files)

print 'getting basic_check files...'
c.execute("SELECT DISTINCT image_file FROM basic_check")
basic_check_files = set([ row[0] for row in c ])
print '    %d' % len(basic_check_files)

if args.all:
    files = image03_files - basic_check_files
else:
    desired_files = set()
    if args.file:
        desired_files.update([ line.rstrip('\n') for line in args.file ])
    if args.files:
        desired_files.update(args.files)
    done_files = desired_files.intersection(basic_check_files)
    for file in done_files:
        print 'NOTICE: already done: %s' % file
    desired_files.difference_update(basic_check_files)
    unknown_files = desired_files - image03_files
    for file in unknown_files:
        print 'NOTICE: unknown: %s' % file
    desired_files.difference_update(unknown_files)
    files = desired_files

if len(files) == 1:
    print '1 file to process'
else:
    print '%d files to process' % len(files)

if not files:
    sys.exit(0)

if args.check_only:
    print 'done checks'
    sys.exit(0)

for f in files:
    print f
    if len(image03[f]) > 1:
        print '    multiple entries'
        continue
    (_, subjectkey, interview_age, image03_id) = image03[f][0]
    cmd_args = ['qsub', '/ndar/sge/launch_basic_check']
    cmd_args.append(subjectkey)
    cmd_args.append(str(interview_age))
    cmd_args.append(str(image03_id))
    cmd_args.append(f)
    cmd_args.append('s3://NITRC_data/thumbnails/')
    po = subprocess.Popen(cmd_args, 
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.PIPE)
    if po.wait() != 0:
        print 'ERROR in qsub:'
        print po.stderr.read()
        sys.exit(1)
    print '    job %s' % po.stdout.read().strip()

db.commit()
db.close()

sys.exit(0)

# eof
