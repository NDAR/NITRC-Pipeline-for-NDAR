#!/usr/bin/python

import sys
import os
import tempfile
import shutil
import MySQLdb
import ndar
import qa
import utils

clean_flag = False
#clean_flag = True

progname = os.path.basename(sys.argv[0])

if len(sys.argv) != 2:
    print 'usage: %s <image file>' % progname
    sys.exit(1)

p = ndar.MySQLPackage(os.environ['MYSQL_HOST'], 
                      os.environ['MYSQL_USER'], 
                      os.environ['MYSQL_PASSWORD'], 
                      os.environ['MYSQL_DATABASE'], 
                      os.environ['S3_ACCESS_KEY'], 
                      os.environ['S3_SECRET_KEY'])

im = None
for i in p.images:
    if i.image_file == sys.argv[1]:
        im = i
        break

if not im:
    sys.stderr.write('%s: %s not found\n' % (progname, sys.argv[1]))
    sys.exit(1)

db = MySQLdb.connect(os.environ['MYSQL_HOST'], 
                     os.environ['MYSQL_USER'], 
                     os.environ['MYSQL_PASSWORD'], 
                     os.environ['MYSQL_DATABASE'])
c = db.cursor()
c.execute('SELECT COUNT(*) FROM imaging_qa01 WHERE file_source = %s', 
          (im.image_file, ))
n_rows = c.fetchone()[0]
c.close()
db.close()

if n_rows:
    sys.stderr.write('%s: %s has QA results\n' % (progname, sys.argv[1]))
    sys.exit(1)

if im.scan_type == 'structural':
    try:
        working_dir = tempfile.mkdtemp()
        workflow = qa.StructuralQAWorkflow(name='structural_qa',
                                           in_file=im.nifti_1_gz,
                                           base_dir=working_dir)
        g = workflow.run()
        utils.store_structural_qa(im, 
                                  g, 
                                  os.environ['MYSQL_HOST'], 
                                  os.environ['MYSQL_USER'], 
                                  os.environ['MYSQL_PASSWORD'], 
                                  os.environ['MYSQL_DATABASE'])
        print
        print 'SUCCESS'
        print
    finally:
        if clean_flag:
            shutil.rmtree(working_dir)
        else:
            im._clean_on_del = False
            print 'im._tempdir:', im._tempdir
            print 'working dir:', working_dir
        del im
elif im.scan_type == 'time series':
    print 'time series unsupported'
elif im.scan_type == 'diffusion':
    try:
        working_dir = tempfile.mkdtemp()
        qa.run_diffusion_qa(im.nrrd, working_dir)
        xml = im.nrrd[:-5] + '_XMLQCResult.xml'
        print xml
        utils.store_diffusion_qa(im, 
                                 xml, 
                                 os.environ['MYSQL_HOST'], 
                                 os.environ['MYSQL_USER'], 
                                 os.environ['MYSQL_PASSWORD'], 
                                 os.environ['MYSQL_DATABASE'])
        print
        print 'SUCCESS'
        print
    finally:
        if clean_flag:
            shutil.rmtree(working_dir)
        else:
            im._clean_on_del = False
            print 'im._tempdir:', im._tempdir
            print 'working dir:', working_dir
        del im
else:
    sys.stderr.write('%s: unknown scan type "%s"\n' % (progname, im.scan_type))
    sys.exit(1)

sys.exit(0)

# eof
